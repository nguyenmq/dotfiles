runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()

"-----------------------------------------------------------
" General settings
"-----------------------------------------------------------
syntax on                           " enable syntax highlighting
set number                          " enable line nubmers
set tabstop=4                       " width of a tab
set shiftwidth=4                    " number of spaces for step of indentation
set softtabstop=4                   " number of spaces to insert for a tab in insert mode
set autoindent                      " indent new lines
set nowrap                          " turn off line wrapping
set hlsearch                        " highlight pattern when searching
set wildmode=longest,list,full      " autocompletion strategy
set wildmenu                        " commandline complete
set wildignore=*.o,*.so,*.a,*.o32,*.obj,*.out,*.zip,*.exe,*.lib,*.gca
                                    " file types to ignore
set expandtab                       " use spaces instead of tabs
set backspace=2                     " backspace over everything
set incsearch                       " do search as user types
set ignorecase                      " ignore case when searching
set smartcase                       " match case when contains uppercase
set background=light                " set background to light for noctu
filetype plugin on                  " turn on filetype
set noequalalways                   " keep windows from automatically resizing
set laststatus=2                    " always show status line
set numberwidth=5                   " set the width of the number line
set switchbuf=useopen               " use current window if open when jumping from quickfix
set noerrorbells visualbell t_vb=   " turn off bells
set foldnestmax=1                   " set max fold level
set cscopequickfix=s-,c-,d-,i-,t-,e-
                                    " open cscope results in quickfix
set completeopt=menuone,longest     " set the autocomplete options
set swapfile                        " enable swapfile
set lazyredraw                      " don't redraw screen when executing macros
set nostartofline                   " keep cursor in column if possible when scrolling
set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize
                                    " what to save in a session file
set modeline                        " apply embedded local options
set tag=./.tags;$HOME               " define tag files locations
set tagcase=match                   " match case when searching tags

if has( "win32" )
set grepprg=grep\ -n                " define grep program
set dir=c:\\temp                    " set the swap directory
else
set dir=/tmp                        " set the swap directory
endif
colorscheme olive                   " set the color scheme

if executable( 'ag' )
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor\ --follow\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m

    " Use ag in CtrlP for listing files
    let g:ctrlp_user_command = 'ag %s -l --nocolor --follow -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

"-----------------------------------------------------------
" Abbreviations
"-----------------------------------------------------------
abbr nll NULL

"-----------------------------------------------------------
" Auto commands
"-----------------------------------------------------------
autocmd GUIEnter * set visualbell t_vb=
autocmd GUIEnter * let c_no_comment_fold=1

"-----------------------------------------------------------
" Define new commands
"-----------------------------------------------------------
" set width of window
command! -nargs=1 Width vertical resize <args>
" set height of window
command! -nargs=1 Height resize <args>
" cscope find definition
command! -nargs=1 Csg :cs find g <args>
" cscope find file name
command! -nargs=1 Csf :cs find f <args>
" cscope find all uses
command! -nargs=1 Css :cs find s <args>

"-----------------------------------------------------------
" New mappings
"-----------------------------------------------------------
" map leader key to space
let mapleader = "\<space>"
" map jk to escape
inoremap jk <Esc>:update<CR>
" ctrl+s to save
noremap  <silent> <C-S> :update<CR>
" use ctrl+j for local completion and cycling
inoremap <expr> <C-j> ((pumvisible())?("\<C-n>"):("\<C-x><C-n>"))
" use ctrl+k for local completion and cycling
inoremap <expr> <C-k> ((pumvisible())?("\<C-p>"):("\<C-x><C-p>"))
" move to window below
noremap <C-J>     <C-W>j
" move to window above
noremap <C-K>     <C-W>k
" move to left window
noremap <C-H>     <C-W>h
" move to right window
noremap <C-L>     <C-W>l
" delete trailing whitespace
noremap <silent> <Leader>w :%s/\s\+$//g<CR> :noh<CR>
" turn off highlighting
noremap <Leader>n :noh<CR>
" go to next error in quickfix
noremap <silent> <Leader>e :cn<CR> zz
" go to previous error in quickfix
noremap <silent> <Leader>E :cN<CR> zz
" highlight word
noremap <silent> <Leader>h :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
" highlight selection
noremap <silent> <Leader>H y:let @/='<C-R>0'<CR>:set hls<CR>
" yank current word to system clipboard
noremap <Leader>y "+yiw:let @*=@+<CR>:echo 'Yanked: <C-R>+'<CR>
" yank from the cursor position till the end of the line
noremap <Leader>Y "+y$:let @*=@+<CR>:echo "Yanked!"<CR>
" paste before cursor from system clipboard
noremap <Leader>p "+gP
" find the definition for the word under cursor and go to the window on the left
noremap <Leader>k yiw<C-W>h:cs find g <C-R>"<CR>
" quit the current window
noremap <Leader>x :q<CR>
" open the current window in a new tab
noremap <Leader>z :tab split<CR>
" move to the previous activated window (similar to tmux binding)
noremap <C-W>p <C-W>;
" cscope mappings
noremap <Leader>cg :cs find g <C-R><C-W><CR>
noremap <Leader>cs :cs find s <C-R><C-W><CR>
noremap <Leader>cf :cs find f <C-R><C-W><CR>
noremap <Leader>ce :cs find e <C-R><C-W><CR>

"-----------------------------------------------------------
" Configure airline
"-----------------------------------------------------------
let g:airline_theme='olive'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_skip_empty_sections = 1
let g:airline_inactive_collapse=0
let g:airline_extensions = ['branch', 'ctrlp', 'whitespace', 'tagbar']
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#format = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#show_message = 0
let g:airline#extensions#whitespace#symbol = '!!'
let g:airline#extensions#default#section_truncate_width = {
  \ 'a': 60,
  \ 'b': 30,
  \ 'y': 88,
  \ 'z': 45,
  \ }
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ],
  \ [ 'y', 'z', 'warning' ]
  \ ]
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['%3v'])
    let g:airline_section_b = airline#section#create(['branch'])
    let g:airline_section_c = airline#section#create(['%t%m'])
    let g:airline_section_y = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['%3p%%'])
    let g:airline_section_error = airline#section#create(['whitespace'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

"-----------------------------------------------------------
" Configure CtrlP
"-----------------------------------------------------------
let g:ctrlp_max_depth = 40
let g:ctrlp_max_files = 0
let g:ctrlp_switch_buffer = '0'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_show_hidden = 0
let g:ctrlp_extensions = ['tag', 'buffertag']
let g:ctrlp_buftag_types = { 'go' : '--language-force=go --go-types=d' }

" search open buffers
noremap <silent> <Leader>b :CtrlPBuffer<cr>
" search tags in current buffer
noremap <silent> <Leader>t :CtrlPBufTag<cr>
" search file recursively
noremap <silent> <Leader>f :CtrlP<cr>

"-----------------------------------------------------------
" Configure Supertab
"-----------------------------------------------------------
let g:SuperTabDefaultCompletionType = "<c-x><c-n>"

"-----------------------------------------------------------
" Configure numbers plugin
"-----------------------------------------------------------
" toggle numbers on/off
noremap <silent> <C-N> :NumbersToggle<CR>
" excluded filetypes
let g:numbers_exclude = [ 'help', 'fugitiveblame' ]
let g:loaded_logipat = 1

"-----------------------------------------------------------
" Configure fugitive
"-----------------------------------------------------------
" run git blame
noremap <silent> <Leader>gb :Gblame<CR>
" run git diff
noremap <silent> <Leader>gd :tab split<CR>:Gvdiff<CR>
" close tabs
noremap <silent> <Leader>gx :tabc<CR>

"-----------------------------------------------------------
" Configure pymode
"-----------------------------------------------------------
let g:pymode_lint_on_write = 0
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = [ 'pyflakes', 'pep8' ]
let g:pymode_lint_signs = 0
let g:pymode_lint_cwindow = 1
let g:pymode_indent = 0
let g:pymode_lint_sort = ['E', 'C', 'I']
let g:pymode_folding = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_rope_goto_definition_bind = '<leader>jg'
let g:pymode_breakpoint_bind = '<leader>jb'
let g:pymode_rope_regenerate_on_write = 0
let g:pymode_trim_whitespaces = 0
let g:pymode_syntax_indent_errors = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_options = 0
let g:pymode_options_colorcolumn = 0
let g:pymode_lint_ignore = "E265,E501"
noremap <Leader>jl :PymodeLint<CR>

"-----------------------------------------------------------
" Configure go whitespace highlighting
"-----------------------------------------------------------
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_chan_whitespace_error = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_space_tab_error = 0
let g:go_highlight_trailing_whitespace_error = 0

"-----------------------------------------------------------
" Configure Tagbar
"-----------------------------------------------------------
let g:tagbar_vertical = 20
let g:tagbar_autoclose = 1
let g:tagbar_compact = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_previewwin_pos = "aboveleft"
noremap <Leader>ct :TagbarToggle<CR>

"-----------------------------------------------------------
" Functions
"-----------------------------------------------------------
" LookFor a general regex
command! -nargs=* Lf call functions#Lookfor( <f-args> )
" Lookfor python functions
command! -nargs=0 Ldef call functions#Lookfor( '^\s*\<def\>' )
" Align general block of text
command! -nargs=+ A call functions#Align( <f-args> )
" Align single line of text to given text width
command! -nargs=1 Al call functions#Align( 0, <f-args> )
" Align comments
command! -nargs=1 Ac call functions#Align( <f-args>, 60 )
" Align function header comments
command! -nargs=1 Af call functions#Align( <f-args>, 70 )
" Copy the filename of the active file into the system clipboard register
command! -nargs=0 Bn call functions#Basename()
" Change and #define line into an #undef line
command! -nargs=0 Und call functions#Undefine()
