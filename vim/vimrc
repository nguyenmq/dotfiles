"-----------------------------------------------------------
" Plug-in settings
"-----------------------------------------------------------
call plug#begin()

Plug 'christoomey/vim-tmux-navigator'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'jasdel/vim-smithy', { 'for': 'smithy' }
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'lambdalisue/vim-pager'
Plug 'majutsushi/tagbar'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'udalov/kotlin-vim'
Plug 'vim-airline/vim-airline'
Plug 'dense-analysis/ale'

call plug#end()

"-----------------------------------------------------------
" General settings
"-----------------------------------------------------------
syntax on                           " enable syntax highlighting
set number                          " enable line nubmers
set relativenumber                  " enable relative numbering
set tabstop=4                       " width of a tab
set shiftwidth=4                    " number of spaces for step of indentation
set softtabstop=4                   " number of spaces to insert for a tab in insert mode
set autoindent                      " indent new lines
set nowrap                          " turn off line wrapping
set hlsearch                        " highlight pattern when searching
set wildmode=longest,list,full      " autocompletion strategy
set wildmenu                        " commandline complete
set wildignore=*.o,*.so,*.a,*.o32,*.obj,*.out,*.zip,*.exe,*.lib,*.gca
                                    " file types to ignore
set expandtab                       " use spaces instead of tabs
set backspace=2                     " backspace over everything
set incsearch                       " do search as user types
set ignorecase                      " ignore case when searching
set smartcase                       " match case when contains uppercase
set background=light                " set background to light for noctu
filetype plugin on                  " turn on filetype
filetype indent off
set noequalalways                   " keep windows from automatically resizing
set laststatus=2                    " always show status line
set numberwidth=5                   " set the width of the number line
set switchbuf=useopen               " use current window if open when jumping from quickfix
set noerrorbells visualbell t_vb=   " turn off bells
set foldnestmax=1                   " set max fold level
set completeopt=menuone,longest     " set the autocomplete options
set swapfile                        " enable swapfile
set lazyredraw                      " don't redraw screen when executing macros
set nostartofline                   " keep cursor in column if possible when scrolling
set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize
                                    " what to save in a session file
set modeline                        " apply embedded local options
set tag=.tags;$HOME                 " define tag files locations
set tagcase=match                   " match case when searching tags
set timeoutlen=1000                 " mapped key timeout
set ttimeoutlen=10                  " key code timeout
set showcmd                         " show keystroke commands in status
colorscheme olive                   " set the color scheme
set dir=/tmp                        " set the swap directory
set t_Co=256
set undofile
set undodir=~/.cache/vim/undo
set cursorlineopt=screenline
set formatoptions+=j

" enable true color mode
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors

" enable strikethrough for certain terminals
if &term =~ 'xterm\|kitty\|alacritty\|tmux'
    let &t_Ts = "\e[9m"   " Strikethrough
    let &t_Te = "\e[29m"
    let &t_Cs = "\e[4:3m" " Undercurl
    let &t_Ce = "\e[4:0m"
endif

" Configuration for diff mode
if &diff
    set diffopt=filler,context:1000000
endif

if executable( 'ag' )
    " Use ag over grep
    set grepprg=ag\ --all-text\ --nogroup\ --nocolor\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
    let g:ackprg = 'ag --nogroup --nocolor --column'
endif

"-----------------------------------------------------------
" Define new commands
"-----------------------------------------------------------
" set width of window
command! -nargs=1 Width vertical resize <args>
" set height of window
command! -nargs=1 Height resize <args>

"-----------------------------------------------------------
" New mappings
"-----------------------------------------------------------
" map leader key to space
let mapleader = "\<space>"
" map jk to escape
inoremap jk <Esc>:update<CR>
" use ctrl+j for local completion and cycling
inoremap <expr> <C-j> ((pumvisible())?("\<C-n>"):("\<C-x><C-n>"))
" use ctrl+k for local completion and cycling
inoremap <expr> <C-k> ((pumvisible())?("\<C-p>"):("\<C-x><C-p>"))
" move to window below
noremap <C-J> <C-W>j
" move to window above
noremap <C-K> <C-W>k
" move to left window
noremap <C-H> <C-W>h
" move to right window
noremap <C-L> <C-W>l
" delete trailing whitespace
noremap <silent> <Leader>w :Cw<CR>
" turn off highlighting
noremap <silent> <Leader>n :call functions#SearchTurnOffHighlight()<CR>:noh<CR>
" go to next error in quickfix
noremap <silent> <Leader>e :cn<CR> zz
" go to previous error in quickfix
noremap <silent> <Leader>E :cN<CR> zz
" highlight word
noremap <silent> <Leader>h :call functions#SearchWithHighlight("\\<<C-R><C-W>\\>")<CR>:set hls<CR>
" highlight selection
noremap <silent> <Leader>H y/<C-R>0<CR>``zz:set hls<CR>
" yank current word to system clipboard
noremap <Leader>y "+yiw:let @*=@+<CR>:echo 'Yanked: <C-R>+'<CR>
" yank from the cursor position till the end of the line
noremap <Leader>Y "+y$:let @*=@+<CR>:echo "Yanked!"<CR>
" quit the current window
noremap <Leader>x :q<CR>
" open the current window in a new tab
noremap <Leader>z :tab split<CR>:diffoff<CR>
" echo the file name
noremap <Leader>l :echo expand('%:p')<CR>
" insert a date timestamp
iab <expr> dts strftime("%Y-%m-%d %I:%M %p")
" open file for code review
noremap <silent> <Leader>co :tab split<CR>0f]wgf:execute 'Gvdiff ' . $GIT_DIFF_OBJECT<CR>zR]czz:Vs<CR>
" enable cursorline
noremap <Leader>cl :set cursorline!<CR>

"-----------------------------------------------------------
" Configure airline
"-----------------------------------------------------------
if empty($SSH_CLIENT)
    let g:airline_theme='olive'
else
    let g:airline_theme='lavender'
endif

let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_symbols = {
  \ 'branch' : '',
  \ }
let g:airline_skip_empty_sections = 1
let g:airline_inactive_collapse=0
let g:airline_extensions = ['branch', 'whitespace', 'tagbar', 'tabline', 'ale']
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#format = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#show_message = 0
let g:airline#extensions#whitespace#symbol = '!!'
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#ale#enabled = 1
let airline#extensions#ale#show_line_numbers = 1
let g:airline#extensions#default#section_truncate_width = {
  \ 'a': 90,
  \ 'b': 90,
  \ 'c': 20,
  \ 'x': 90,
  \ 'y': 90,
  \ 'z': 90,
  \ }
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'z', 'error', 'warning' ]
  \ ]

let g:airline#extensions#tabline#show_tab_count = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#tabnr_formatter = 'tabnr'
let g:airline#extensions#tabline#fnamemod = ':p'
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#tabtitle_formatter = 'TablineTitleFormatter'

function! TablineTitleFormatter(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let bufnr = buflist[winnr - 1]
    let winid = win_getid(winnr, a:n)
    let title = fnamemodify(bufname(bufnr), ':t')

    if empty(title)
        if getqflist({'qfbufnr' : 0}).qfbufnr == bufnr
            let title = '[Quickfix List]'
        elseif winid && getloclist(winid, {'qfbufnr' : 0}).qfbufnr == bufnr
            let title = '[Location List]'
        else
            let title = '[No Name]'
        endif
    endif

    return title
endfunction

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['%3v'])
    let g:airline_section_b = airline#section#create(['branch'])
    let g:airline_section_c = airline#section#create(['%.60f%m'])
    let g:airline_section_x = airline#section#create(['tagbar'])
    let g:airline_section_y = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['%3p%%'])
    let g:airline_section_error = airline#section#create(['ale_error_count'])
    let g:airline_section_warning = airline#section#create(['whitespace'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

"-----------------------------------------------------------
" Configure fzf
"-----------------------------------------------------------
let g:fzf_layout = { 'down': '~25%' }

" search open buffers
noremap <silent> <Leader>b :Buffers<cr>
" search tags in current buffer
noremap <silent> <Leader>t :BTags<cr>
" search command history
noremap <silent> <Leader>r :History:<cr>
" search file recursively
noremap <silent> <Leader>f :Files<cr>
" start an ag search
noremap <Leader>s :Ag!<space>

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Cursor'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'String'],
  \ 'fg+':     ['bg', 'Cursor'],
  \ 'bg+':     ['bg', 'CursorLine'],
  \ 'hl+':     ['fg', 'String'],
  \ 'info':    ['fg', 'String'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'StatusLine'],
  \ 'pointer': ['bg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'gutter':  ['bg', 'LineNr'],
  \ 'header':  ['fg', 'SpellRare'] }

let g:terminal_ansi_colors = [
    \ '{{black_almost}}',
    \ '{{red}}',
    \ '{{green}}',
    \ '{{yellow}}',
    \ '{{blue}}',
    \ '{{magenta}}',
    \ '{{lavender}}',
    \ '{{gray_dark}}',
    \ '{{black_almost}}',
    \ '{{red}}',
    \ '{{green}}',
    \ '{{yellow}}',
    \ '{{blue}}',
    \ '{{magenta}}',
    \ '{{lavender}}',
    \ '{{gray_light}}',
\ ]


function! s:fzf_statusline()
    " Override statusline as you like
    highlight fzf1 guifg={{black_almost}} guibg={{ui_accent}}
    highlight fzf2 guifg={{black_almost}} guibg={{ui_accent}}
    highlight fzf3 guifg={{black_almost}} guibg={{ui_accent}}
    setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

let g:fzf_preview_window = ['down,50%,<10(right,50%)', 'ctrl-/']

"-----------------------------------------------------------
" Configure numbers plugin
"-----------------------------------------------------------
" toggle numbers on/off
noremap <silent> <C-N> :NumbersToggle<CR>
" excluded filetypes
let g:numbers_exclude = [ 'help', 'fugitiveblame' ]
let g:loaded_logipat = 1

"-----------------------------------------------------------
" Configure fugitive
"-----------------------------------------------------------
" run git blame
noremap <silent> <Leader>gb :Git blame<CR>
" run git diff
noremap <silent> <Leader>gd :Gvdiff origin/mainline<CR>zR
" close tabs
noremap <silent> <Leader>gx :tabclose<CR>gT

noremap <silent> <Leader>gt "tyiw:YATE<CR>\<t\>

"-----------------------------------------------------------
" Configure go whitespace highlighting
"-----------------------------------------------------------
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_chan_whitespace_error = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_space_tab_error = 0
let g:go_highlight_trailing_whitespace_error = 0

"-----------------------------------------------------------
" Configure Tagbar
"-----------------------------------------------------------
let g:tagbar_vertical = 20
let g:tagbar_autoclose = 1
let g:tagbar_compact = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_previewwin_pos = "aboveleft"
noremap <Leader>ct :TagbarToggle<CR>

"-----------------------------------------------------------
" Configure tmux navigator
"-----------------------------------------------------------
let g:tmux_navigator_disable_when_zoomed = 1

"-----------------------------------------------------------
" vim-markdown configuration
"-----------------------------------------------------------
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_no_default_key_mappings = 1

"-----------------------------------------------------------
" configure ack
"-----------------------------------------------------------
let g:ack_qhandler = "botright copen 7"
let g:ack_lhandler = "botright lopen 7"
let g:ackhighlight = 1

"-----------------------------------------------------------
" Configure vim-easy-align
"-----------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"-----------------------------------------------------------
" Functions
"-----------------------------------------------------------
" LookFor a general regex
command! -nargs=* Lf call functions#Lookfor( <f-args> )
" Copy the filename of the active file into the system clipboard register
command! -nargs=0 Bn call functions#Basename()
" Change and #define line into an #undef line
command! -nargs=0 Cw call functions#CleanWhitespace()
" Check dangling java imports
command! -nargs=0 Ci call functions#CheckImports()
" Resize or vertical split to fixed percentage
command! -nargs=0 Vs call functions#VertSplitPercent(0.41)
noremap <silent> <Leader>v :Vs<CR>
command! -nargs=0 Gl call functions#GetLocation()
" paste a cr link
noremap <Leader>cr :call functions#PasteCRLink()<CR>:update<CR>

"-----------------------------------------------------------
" Settings for managing tasks in the planner
"-----------------------------------------------------------
let @d='- [ ] '
command! -nargs=0 -range TaskStrikethroughToggle <line1>,<line2>call functions#TaskStrikethroughToggle()
noremap <silent> <Leader>dd :TaskStrikethroughToggle<CR>:update<CR>
command! -nargs=0 RotateCapture call functions#RotateCapture()
command! -nargs=0 PuntTasks call functions#PuntTasks()
noremap <silent> <Leader>dp :PuntTasks<CR>
command! -nargs=0 WipTask call functions#WipTask()
noremap <silent> <Leader>dw :WipTask<CR>
command! -nargs=1 Agg call functions#Search(<f-args>)
command! -nargs=0 Wm call functions#ToggleWrap()

let g:ale_enabled = 0
let g:ale_lint_on_text_changed  = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_filetype_changed = 0

" Shorten error/warning flags
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_sign_error = 'x '
let g:ale_sign_warning = '> '

" Disable or enable loclist at the bottom of vim
" Comes down to personal preferance.
let g:ale_open_list = 0
let g:ale_loclist = 0
let g:ale_sign_column_always = 1

" Setup compilers for languages

let g:ale_linters = {
      \  'java': ['javac'],
      \  'markdown': []
      \ }
