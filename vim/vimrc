runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()

"-----------------------------------------------------------
" General settings
"-----------------------------------------------------------
syntax on
set number
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set nowrap
set hlsearch
set wildmode=longest,list,full
set wildmenu
set wildignore=*.o,*.so,*.a,*.o32,*.obj,*.out,*.zip,*.exe,*.lib,*.gca
set expandtab
set backspace=2                     " backspace over everything
set incsearch                       " do search as user types
set ignorecase                      " ignore case when searching
set smartcase                       " match case when contains uppercase
set background=light                " set background to light for noctu
filetype plugin on                  " turn on filetype
set noequalalways                   " keep windows from automatically resizing
set laststatus=2                    " always show status line
set numberwidth=5                   " set the width of the number line
set switchbuf=useopen               " use current window if open when jumping from quickfix
set noerrorbells visualbell t_vb=   " turn off bells
set foldnestmax=1                   " set max fold level
set cscopequickfix=s-,c-,d-,i-,t-,e-
                                    " open cscope results in quickfix
set completeopt=menuone,longest     " set the autocomplete options
set swapfile                        " enable swapfile

if has( "win32" )
set grepprg=grep\ -n                " define grep program
set dir=c:\\temp                    " set the swap directory
else
set dir=/tmp                        " set the swap directory
endif
colo olive

"-----------------------------------------------------------
" Set up macros
"-----------------------------------------------------------
let @p='24|r*'
                                    " change variable to a pointer
let @c='O*/^60i-59|dt*O/*60a-61|D^'
                                    " insert C block comment
let @g='O#60a-61|Dyypko# '
                                    " insert script block comment
let @f='O69a*$a/O/69a*jo"0p$bmaj%f;xa{kO58a-a*/O/*58a-oLocal Variableskk%A 	/* */bmb`a"1yiw`b"1Pa() o`akkO** 	PROCEDURE NAME:* 	 	1** 	DESCRIPTION:* 	 	desc*kw'
                                    " insert C function block
let @v='O70i 0Rtyp25|Rvar37|R/* v69|R*/0fv0R'
                                    " insert a variable

"-----------------------------------------------------------
" Abbreviations
"-----------------------------------------------------------
abbr nll NULL
abbr tw0 set tw=0
abbr tw60 set tw=60
abbr tw70 set tw=70
abbr tw80 set tw=80
abbr tnew tabnew
abbr udpate update

"-----------------------------------------------------------
" Auto commands
"-----------------------------------------------------------
autocmd GUIEnter * set visualbell t_vb=
autocmd GUIEnter * let c_no_comment_fold=1

"-----------------------------------------------------------
" Define new commands
"-----------------------------------------------------------
command! -nargs=1 Width vertical resize <args>
                                    " set width of window
command! -nargs=1 Height resize <args>
                                    " set height of window
command! -nargs=1 Csg :cs find g <args>
                                    " cscope find definition
command! -nargs=1 Csf :cs find f <args>
                                    " cscope find file name
command! -nargs=1 Css :cs find s <args>
                                    " cscope find all uses

"-----------------------------------------------------------
" New mappings
"-----------------------------------------------------------
let mapleader = "\<space>"
                                    " map leader key to space
inoremap jk <Esc>
                                    " map jk to escape
noremap  <silent> <C-S> :update<CR>
                                    " ctrl+s to save
vnoremap <silent> <C-S> <C-C>:update<CR>
                                    " ctrl+s to save
inoremap <silent> <C-S> <C-O>:update<CR>
                                    " ctrl+s to save
inoremap <C-J> <C-X><C-N>
inoremap <C-K> <C-X><C-P>
noremap <C-J>     <C-W>j
                                    " move to window below
noremap <C-K>     <C-W>k
                                    " move to window above
noremap <C-H>     <C-W>h
                                    " move to left window
noremap <C-L>     <C-W>l
                                    " move to right window
noremap <silent> <Leader>w :%s/\s\+$//g<CR> :noh<CR>
                                    " delete trailing whitespace
noremap <Leader>n :noh<CR>
                                    " turn off highlighting
noremap <Leader>c :120vs<CR>:botright 7cope<CR><C-W>k<C-W>l
                                    " open the quick fix menu
noremap <silent> <Leader>e :cn<CR> zz
                                    " go to next error in quickfix
noremap <silent> <Leader>E :cN<CR> zz
                                    " go to previous error in quickfix
noremap <silent> <Leader>h :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
                                    " highlight word
noremap <silent> <Leader>H y:let @/='<C-R>0'<CR>:set hls<CR>
                                    " highlight selection
noremap <silent> <Leader>d za
                                    " map toggle fold
noremap <silent> <Leader>j zj za
                                    " move to next fold and toggle it
noremap <Leader>y "+yiw:echo "Yanked: <C-R>+"<CR>
                                    " yank current word to system clipboard
noremap <Leader>Y v$h"+y:echo "Yanked: <C-R>+"<CR>
noremap <Leader>p "+gP
                                    " paste before cursor from system clipboard
noremap <Leader>k yiw<C-W>h:cs find g <C-R>"<CR>
                                    " find the definition for the word under
                                    " cursor and go to the window on the left
noremap <Leader>x :q<CR>
                                    " quit the current window
noremap <Leader>z :tab split<CR>
                                    " open the current window in a new tab

"-----------------------------------------------------------
" Configure airline
"-----------------------------------------------------------
let g:airline_theme='monochrome'
let g:airline_inactive_collapse=0
let g:airline_extensions = ['branch', 'tagbar', 'ctrlp', 'whitespace']
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#format = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#default#section_truncate_width = {
  \ 'a': 60,
  \ 'c': 79,
  \ 'x': 60,
  \ 'y': 88,
  \ 'z': 45,
  \ }
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'z', 'warning' ]
  \ ]
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['%2v'])
    let g:airline_section_b = airline#section#create(['file'])
    let g:airline_section_c = airline#section#create(['branch'])
    let g:airline_section_z = airline#section#create(['%3p%%'])
    let g:airline_section_warning = airline#section#create(['whitespace'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

"-----------------------------------------------------------
" Configure CtrlP
"-----------------------------------------------------------
let g:ctrlp_max_depth = 40
let g:ctrlp_max_files = 0
let g:ctrlp_switch_buffer = '0'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_user_command = 'find -L %s -path "*/gen/*" -prune -o -path "*/bin/*" -prune -o -path ".git" -prune -o -path "*/bbin/*" -prune -o -regextype posix-egrep -regex ".*\.(c|h|tmpl|inc|xml|py|jam|pl)"'
"let g:ctrlp_custom_ignore = {
"    \ 'file': '\v\.(o|so|a|o32|obj|out|zip)$',
"\ }
noremap <silent> <Leader>b :CtrlPBuffer<cr>
                                    " search open buffers
noremap <silent> <Leader>t :CtrlPBufTag<cr>
                                    " search tags in current buffer
noremap <silent> <Leader>f :CtrlP<cr>
                                    " search file recursively
noremap <silent> <Leader>l :CtrlPLine %<cr>
                                    " search lines in current buffer
"-----------------------------------------------------------
" Configure Supertab
"-----------------------------------------------------------
let g:SuperTabDefaultCompletionType = "<c-x><c-n>"

"-----------------------------------------------------------
" Configure numbers plugin
"-----------------------------------------------------------
noremap <silent> <C-N> :NumbersToggle<CR>
                                    " toggle numbers on/off
let g:numbers_exclude = [ 'help', 'fugitiveblame' ]
                                    " excluded filetypes

"-----------------------------------------------------------
" Configure fugitive
"-----------------------------------------------------------
noremap <silent> <Leader>gb :Gblame<CR>
                                    " run git blame
noremap <silent> <Leader>gs :Gstatus<CR>
                                    " run git status

"-----------------------------------------------------------
" Configure tagbar
"-----------------------------------------------------------
nnoremap <silent> <F1> :TagbarOpenAutoClose<CR>
                                    " jump to tagbar window
nnoremap <silent> <F2> :TagbarToggle<CR>
                                    " open/close tagbar window
let g:tagbar_show_linenumbers = -1
                                    " show line numbers in tagbar
let g:tagbar_width = 34
                                    " set width of tagbar window
let g:tagbar_type_c = {
    \ 'kinds' : [
        \ 'd:macros:1:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 's:structs:1:0',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
        \ 'p:prototypes:0:0',
        \ 'f:functions',
    \ ],
\ }                                 " customize display of C tags
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:1:0',
        \ 'g:enums:1:1',
        \ 'e:enumerators:1:1',
        \ 't:typedefs:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
        \ 'p:prototypes:0:0',
        \ 'f:functions',
    \ ],
\ }                                 " customize display of header files


let g:pymode_lint_on_write = 0
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0
let g:pymode_indent = 0
let g:pymode_folding = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_rope_goto_definition_bind = '<leader>jg'
let g:pymode_breakpoint_bind = '<leader>jb'
let g:pymode_rope_regenerate_on_write = 0
let g:pymode_trim_whitespaces = 0
let g:pymode_syntax_indent_errors = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_options = 0
let g:pymode_options_colorcolumn = 0
let g:pymode_lint_checkers = [ 'pyflakes' ]

"-----------------------------------------------------------
" Functions
"-----------------------------------------------------------
let s:color_column_enable=0
function! ColorColumnToggle()
    if( s:color_column_enable == 1 )
        let s:color_column_enable=0
        set colorcolumn=0
    else
        let s:color_column_enable=1
        set colorcolumn=25
        set colorcolumn+=37
        set colorcolumn+=60
        set colorcolumn+=70
        set colorcolumn+=81
    endif
endfunc
command! -nargs=0 ColorColumnToggle call ColorColumnToggle()
noremap <silent> <Leader>a :ColorColumnToggle<CR>
call ColorColumnToggle()

" LookFor a general regex
command! -nargs=* Lf call functions#Lookfor( <f-args> )
" LookFor a function header
command! -nargs=0 Lfun call functions#Lookfor( '^\*\s*PROCEDURE NAME:\n^\*\s*\zs\(\w*\)' )
" Lookfor #define's
command! -nargs=* Ldef call functions#Lookfor( '^#define' )
" Lookfor failures in test
command! -nargs=* Lr call functions#Lookfor( 'result="fail"' )
" Align general block of text
command! -nargs=+ A call functions#Align( <f-args> )
" Align single line of text to given text width
command! -nargs=1 Al call functions#Align( 0, <f-args> )
" Align comments
command! -nargs=1 Ac call functions#Align( <f-args>, 60 )
" Align function header comments
command! -nargs=1 Af call functions#Align( <f-args>, 70 )
" Copy the filename of the active file into the system clipboard register
command! -nargs=0 Bn call functions#Basename()
" Change and #define line into an #undef line
command! -nargs=0 Undef :s/.*\s\([A-Z_]\+\)\s.*/#undef \1/g
